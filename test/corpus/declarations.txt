================================================================================
Function declarations
================================================================================

fn main() {}

fn add(x: int, y: int): int {
    return x + y;
}

fn takes_slice(slice: string) {
}

fn foo(): string {
    return "hello;
}

fn foo<T>(x: T?): string? {}

--------------------------------------------------------------------------------

(source_file
  (function_item
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (primitive_type))
      (parameter
        pattern: (identifier)
        type: (primitive_type)))
    return_type: (primitive_type)
    body: (block
      (expression_statement
        (return_expression
          (binary_expression
            left: (identifier)
            right: (identifier))))))
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (primitive_type)))
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters)
    return_type: (primitive_type)
    body: (block
      (expression_statement
        (return_expression
          (ERROR)
          (identifier)))))
  (function_item
    name: (identifier)
    type_parameters: (type_parameters
      (type_identifier))
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (type_identifier))
      (ERROR))
    return_type: (primitive_type)
    (ERROR)
    body: (block)))

================================================================================
Variable declarations
================================================================================

let x: int = 5;
const API_HOST: string = "https://api.example.com";
let a = [string] { "Foo", "Bar" };
let b = <string, int> { "Foo": 1, "Bar": 2 };

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (primitive_type)
    (integer_literal))
  (const_item
    (identifier)
    (primitive_type)
    (string_literal))
  (let_declaration
    (identifier)
    (ERROR
      (array_expression
        (identifier)))
    (block
      (ERROR
        (string_literal))
      (string_literal)))
  (let_declaration
    (identifier)
    (ERROR
      (bracketed_type
        (primitive_type)
        (ERROR
          (primitive_type))))
    (block
      (ERROR
        (string_literal)
        (integer_literal)
        (string_literal))
      (integer_literal))))

================================================================================
Use
================================================================================

use std.json;
use std.net.http.{self, Headers, Request};

--------------------------------------------------------------------------------

(source_file
  (use_declaration
    (scoped_identifier
      (identifier)
      (identifier)))
  (use_declaration
    (scoped_use_list
      (scoped_identifier
        (scoped_identifier
          (identifier)
          (identifier))
        (identifier))
      (use_list
        (self)
        (identifier)
        (identifier)))))

================================================================================
Struct
================================================================================

struct User {
    name: string,
    email: string?,
}

--------------------------------------------------------------------------------

(source_file
  (struct_item
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (field_identifier)
        (primitive_type))
      (field_declaration
        (field_identifier)
        (primitive_type))
      (ERROR))))
