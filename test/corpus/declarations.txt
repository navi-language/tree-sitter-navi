================================================================================
Function declarations
================================================================================

fn main() {}

fn add(x: int, y: int): int {
    return x + y;
}

fn takes_slice(slice: string) {
}

fn foo(): string {
    return "hello;
}

fn foo<T>(x: T?): string? {}

--------------------------------------------------------------------------------

(source_file
  (function_item
    name: (identifier)
    parameters: (parameters)
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (primitive_type))
      (parameter
        pattern: (identifier)
        type: (primitive_type)))
    return_type: (primitive_type)
    body: (block
      (expression_statement
        (return_expression
          (binary_expression
            left: (identifier)
            right: (identifier))))))
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (primitive_type)))
    body: (block))
  (function_item
    name: (identifier)
    parameters: (parameters)
    return_type: (primitive_type)
    body: (block
      (expression_statement
        (return_expression
          (ERROR)
          (identifier)))))
  (function_item
    name: (identifier)
    type_parameters: (type_parameters
      (type_identifier))
    parameters: (parameters
      (parameter
        pattern: (identifier)
        type: (type_identifier))
      (ERROR))
    return_type: (primitive_type)
    (ERROR)
    body: (block)))

================================================================================
Variable declarations
================================================================================

let x: int = 5;
const API_HOST: string = "https://api.example.com";

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (primitive_type)
    (integer_literal))
  (const_item
    (identifier)
    (primitive_type)
    (string_literal)))
